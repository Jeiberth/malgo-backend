# .ebextensions/02_cron_jobs.config
# Note: Ensure this runs *after* initial setup if it depends on files/configs created there

files:
  # Create a cron file in /etc/cron.d/
  "/etc/cron.d/laravel_scheduler":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Run the Laravel scheduler once every minute.
      # The scheduler itself determines which tasks run when (e.g., daily).
      # Output is redirected to /dev/null to prevent cron emails.
      0 3 * * * root cd /var/app/current && php artisan schedule:run >> /dev/null 2>&1

# Use container_commands to ensure this runs only once per deployment
# And specifically on the leader instance to avoid multiple crons trying to add the file
container_commands:
  # Remove the old cron file if it exists (optional, but good practice)
  01_remove_old_cron:
    command: "rm -f /etc/cron.d/laravel_scheduler.bak"
    ignoreErrors: true
    leader_only: true

  # Ensure the cron service recognizes the new file. This needs to run on the leader.
  # The 'test' makes sure the file exists before attempting to chmod/chown
  02_setup_cron:
     command: "chmod 644 /etc/cron.d/laravel_scheduler && chown root:root /etc/cron.d/laravel_scheduler"
     leader_only: true # Crucial: Only leader instance sets up the cron definition

# Leader only is critical here. Cron jobs should only be defined on one instance in a load balanced environment.
# The file content defines the cron job to run 'php artisan schedule:run' every minute.
# Laravel's scheduler (Kernel.php) then decides if the 'daily()' task should run during that minute.
# Sourcing /opt/elasticbeanstalk/deployment/env loads the environment variables (like DB creds) needed by artisan.